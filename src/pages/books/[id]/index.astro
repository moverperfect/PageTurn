---
import Layout from '../../../layouts/Layout.astro';
import {
  getBookById,
  getReadingSessionsForBook,
  calculateProgress,
} from '../../../lib/db';

// Get the book ID from URL params
const { id } = Astro.params;

// Fetch the book data
const book = await getBookById(id!);

// Handle case where book is not found
if (!book) {
  return Astro.redirect('/books');
}

// Get reading sessions for this book
const readingSessions = await getReadingSessionsForBook(id!);

// Calculate progress
const progress = calculateProgress(book, readingSessions);

// Sort sessions by date (newest first)
const sortedSessions = [...readingSessions].sort((a, b) => {
  return new Date(b.date).getTime() - new Date(a.date).getTime();
});
---

<Layout title={`${book.title} | PageTurn`}>
  <div class="space-y-8">
    <div class="flex justify-between items-start">
      <div>
        <h1
          class="mb-1 bg-gradient-to-r from-indigo-300 to-purple-300 text-transparent bg-clip-text"
        >
          {book.title}
        </h1>
        <p class="text-xl mb-2 text-gray-300">by {book.author}</p>
      </div>
      <div class="flex space-x-3">
        <a href={`/books/${id}/edit`} class="btn-secondary">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 mr-2"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
            ></path>
          </svg>
          Edit
        </a>
        <button
          id="deleteBtn"
          class="btn bg-gradient-to-r from-red-600 to-red-500 hover:from-red-500 hover:to-red-700"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 mr-2"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
            ></path>
          </svg>
          Delete
        </button>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="card md:col-span-2 shadow-glow-sm animate-glow">
        <h2
          class="mb-4 bg-gradient-to-r from-indigo-300 to-blue-300 text-transparent bg-clip-text"
        >
          Book Details
        </h2>

        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <h3 class="text-sm text-indigo-400 mb-1">Format</h3>
            <p>{book.format}</p>
          </div>

          <div>
            <h3 class="text-sm text-indigo-400 mb-1">Page Count</h3>
            <p>{book.pageCount} pages</p>
          </div>

          <div>
            <h3 class="text-sm text-indigo-400 mb-1">ISBN/ASIN</h3>
            <p>{book.isbn || 'N/A'}</p>
          </div>

          <div>
            <h3 class="text-sm text-indigo-400 mb-1">Genre</h3>
            <p>{book.genre}</p>
          </div>

          <div>
            <h3 class="text-sm text-indigo-400 mb-1">Published</h3>
            <p>{book.publishedYear || 'Unknown'}</p>
          </div>

          <div>
            <h3 class="text-sm text-indigo-400 mb-1">Publisher</h3>
            <p>{book.publisher || 'Unknown'}</p>
          </div>

          <div>
            <h3 class="text-sm text-indigo-400 mb-1">Author</h3>
            <p>
              {book.author} ({
                book.authorSex === 'M'
                  ? 'Male'
                  : book.authorSex === 'F'
                    ? 'Female'
                    : book.authorSex === 'Other'
                      ? 'Other'
                      : 'Unknown'
              })
            </p>
          </div>

          <div>
            <h3 class="text-sm text-indigo-400 mb-1">Recommended to me</h3>
            <p>{book.recommended ? 'Yes' : 'No'}</p>
          </div>

          <div>
            <h3 class="text-sm text-indigo-400 mb-1">Date Acquired</h3>
            <p>{new Date(book.dateAcquired).toLocaleDateString()}</p>
          </div>

          <div>
            <h3 class="text-sm text-indigo-400 mb-1">Cost</h3>
            <p>${book.cost.toFixed(2)}</p>
          </div>
        </div>
      </div>

      <div class="card">
        <h2
          class="mb-4 bg-gradient-to-r from-blue-300 to-purple-300 text-transparent bg-clip-text"
        >
          Reading Progress
        </h2>

        {
          readingSessions.length === 0 ? (
            <div>
              <p class="mb-4">
                You haven't logged any reading sessions for this book yet.
              </p>
              <a
                href="/reading-sessions/new"
                class="btn w-full flex justify-center"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5 mr-2"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z"
                    clip-rule="evenodd"
                  />
                </svg>
                Log Reading Session
              </a>
            </div>
          ) : (
            <div class="space-y-4">
              <div class="mb-3">
                <div class="w-full bg-slate-700 rounded-full h-2.5 overflow-hidden">
                  <div
                    class="bg-gradient-to-r from-indigo-600 to-purple-600 h-2.5 rounded-full transition-all duration-500"
                    style={`width: ${progress.percentComplete}%`}
                  />
                </div>
                <div class="flex justify-between text-sm mt-1">
                  <span>
                    {progress.pagesRead} / {book.pageCount} pages
                  </span>
                  <span>{progress.percentComplete.toFixed(1)}%</span>
                </div>
              </div>

              <div>
                <h3 class="text-sm text-indigo-400 mb-1">Reading Speed</h3>
                <p>{progress.pagesPerHour.toFixed(1)} pages/hour</p>
              </div>

              <div>
                <h3 class="text-sm text-indigo-400 mb-1">Time Per Page</h3>
                <p>{progress.minutesPerPage.toFixed(1)} minutes</p>
              </div>

              <div>
                <h3 class="text-sm text-indigo-400 mb-1">
                  Estimated Time Left
                </h3>
                <p>{progress.estimatedHoursLeft.toFixed(1)} hours</p>
              </div>

              <div class="pt-4">
                <a
                  href="/reading-sessions/new"
                  class="btn block w-full flex justify-center"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 mr-2"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z"
                      clip-rule="evenodd"
                    />
                  </svg>
                  Log Reading Session
                </a>
              </div>
            </div>
          )
        }
      </div>
    </div>

    {
      readingSessions.length > 0 && (
        <div class="card overflow-hidden">
          <div class="flex justify-between items-center mb-4">
            <h2 class="mb-0 bg-gradient-to-r from-purple-300 to-indigo-300 text-transparent bg-clip-text">
              Reading Sessions
            </h2>
          </div>

          <div class="overflow-x-auto">
            <table>
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Pages Read</th>
                  <th>Duration (min)</th>
                  <th>Pages/Hour</th>
                  <th>Finished?</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {sortedSessions.map((session) => {
                  const pagesPerHour =
                    session.pagesRead / (session.duration / 60) || 0;

                  return (
                    <tr>
                      <td>{new Date(session.date).toLocaleDateString()}</td>
                      <td>{session.pagesRead}</td>
                      <td>{session.duration}</td>
                      <td>{pagesPerHour.toFixed(1)}</td>
                      <td>
                        {session.finished ? (
                          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-900/50 text-green-300 border border-green-800">
                            Finished
                          </span>
                        ) : (
                          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-900/50 text-blue-300 border border-blue-800">
                            In Progress
                          </span>
                        )}
                      </td>
                      <td>
                        <a
                          href={`/reading-sessions/${session.id}/edit`}
                          class="text-indigo-400 hover:text-indigo-300 transition-colors"
                        >
                          <span class="sr-only">Edit</span>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                            />
                          </svg>
                        </a>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      )
    }
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const deleteBtn = document.getElementById('deleteBtn');
    const bookId = window.location.pathname.split('/').filter(Boolean)[1];

    if (deleteBtn && bookId) {
      deleteBtn.addEventListener('click', async () => {
        if (
          confirm(
            'Are you sure you want to delete this book? This action cannot be undone.'
          )
        ) {
          try {
            const response = await fetch(`/api/books/${bookId}`, {
              method: 'DELETE',
            });

            if (!response.ok) {
              throw new Error('Failed to delete book');
            }

            window.location.href = '/books';
          } catch (error) {
            console.error('Error deleting book:', error);
            alert('Failed to delete book. Please try again.');
          }
        }
      });
    }
  });
</script>
