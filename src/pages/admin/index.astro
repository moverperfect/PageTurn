---
import Layout from '../../layouts/Layout.astro';
import { getAuth } from '../../lib/auth';

// Check if current user is admin
const session = Astro.locals.session;
const currentUser = session?.User;

if (!currentUser) {
  return Astro.redirect('/login');
}

// Admin check - we'll use the server-side auth to check admin role
const auth = getAuth(Astro.locals.runtime.env);
let isAdmin = false;

try {
  // Check if user has admin role
  const hasAdminPermission = await auth.api.userHasPermission({
    body: {
      userId: currentUser.id,
      permissions: {
        user: ['ban'],
      },
    },
  });

  isAdmin = !!hasAdminPermission;
} catch (error) {
  console.error('Error checking admin permissions:', error);
}

// If not admin, redirect to home
if (!isAdmin) {
  return Astro.redirect('/');
}

// For initial render, we'll leave the users empty and load them via client-side
// This avoids trying to use the client in server-side code
---

<Layout title="Admin Dashboard | PageTurn">
  <h1>User Administration</h1>

  <div class="card mb-8">
    <div class="flex justify-between items-center mb-4">
      <h2 class="mb-0">Users</h2>
      <span id="user-count" class="text-sm text-gray-400">Loading users...</span
      >
    </div>

    <div class="overflow-x-auto">
      <table class="w-full">
        <thead>
          <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Created</th>
            <th>Role</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="users-table-body">
          <tr>
            <td colspan="5" class="text-center py-4">Loading users...</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Sessions Modal -->
  <div
    id="sessionsModal"
    class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden"
  >
    <div
      class="bg-slate-800 rounded-lg p-6 max-w-3xl w-full border border-slate-700"
    >
      <div class="flex justify-between items-center mb-4">
        <h3 id="sessionsModalTitle" class="text-xl font-bold">User Sessions</h3>
        <button id="closeSessionsBtn" class="text-gray-400 hover:text-white">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div id="sessionsContent" class="max-h-[70vh] overflow-y-auto">
        <table class="w-full">
          <thead>
            <tr>
              <th>Device</th>
              <th>IP Address</th>
              <th>Created</th>
              <th>Expires</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="sessionsTableBody">
            <!-- Sessions will be loaded here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Confirmation Modal -->
  <div
    id="confirmationModal"
    class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden"
  >
    <div
      class="bg-slate-800 rounded-lg p-6 max-w-md w-full border border-slate-700"
    >
      <h3 id="modalTitle" class="text-xl font-bold mb-4">Confirm Action</h3>
      <p id="modalMessage" class="mb-6 text-gray-300">
        Are you sure you want to perform this action?
      </p>
      <div class="flex justify-end gap-3">
        <button id="cancelBtn" class="btn-secondary">Cancel</button>
        <button id="confirmBtn" class="btn bg-red-600 hover:bg-red-700"
          >Confirm</button
        >
      </div>
    </div>
  </div>
</Layout>

<script>
  let actionUserId = '';
  let actionType = '';

  // Reference to UI elements
  const userCountElement = document.getElementById('user-count');
  const usersTableBody = document.getElementById('users-table-body');
  const confirmationModal = document.getElementById('confirmationModal');
  const modalTitle = document.getElementById('modalTitle');
  const modalMessage = document.getElementById('modalMessage');
  const confirmBtn = document.getElementById('confirmBtn');
  const cancelBtn = document.getElementById('cancelBtn');

  // Reference to sessions modal elements
  const sessionsModal = document.getElementById('sessionsModal');
  const sessionsModalTitle = document.getElementById('sessionsModalTitle');
  const closeSessionsBtn = document.getElementById('closeSessionsBtn');
  const sessionsTableBody = document.getElementById('sessionsTableBody');

  // Load users on page load
  loadUsers();

  async function loadUsers() {
    try {
      const response = await window.PageTurnAuthClient.admin.listUsers({
        query: {
          sortBy: 'createdAt',
          sortDirection: 'asc',
        },
      });

      // Update the user count
      if (userCountElement && response.data.total !== undefined) {
        userCountElement.textContent = `Total: ${response.data.total} users`;
      }

      // Only proceed if we have a table body and users
      if (
        !usersTableBody ||
        !response.data.users ||
        !response.data.users.length
      ) {
        if (usersTableBody) {
          usersTableBody.innerHTML =
            '<tr><td colspan="5" class="text-center py-4">No users found</td></tr>';
        }
        return;
      }

      // Get current user to disable self-impersonation
      const currentSession = await window.PageTurnAuthClient.getSession();
      const currentUserId = currentSession?.data?.user?.id;

      // Render the users
      usersTableBody.innerHTML = response.data.users
        .map(
          (user: any) => `
        <tr data-user-id="${user.id}">
          <td class="flex items-center gap-2">
            ${
              user.image
                ? `<img src="${user.image}" alt="" class="w-6 h-6 rounded-full" />`
                : `<div class="w-6 h-6 rounded-full bg-indigo-600 flex items-center justify-center text-white text-xs">
                  ${user.name?.charAt(0) || user.email?.charAt(0) || '?'}
                </div>`
            }
            ${user.name}
          </td>
          <td>${user.email}</td>
          <td>${new Date(user.createdAt).toLocaleDateString()}</td>
          <td>
            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-indigo-800 text-indigo-200">
              ${user.role || 'user'}
            </span>
          </td>
          <td>
            <div class="flex gap-2">
              <button 
                class="view-sessions-btn text-xs px-2 py-1 bg-blue-700 hover:bg-blue-600 text-white rounded"
                data-user-id="${user.id}"
              >
                Sessions
              </button>
              <button 
                class="make-admin-btn text-xs px-2 py-1 bg-green-700 hover:bg-green-600 text-white rounded"
                data-user-id="${user.id}"
                data-user-role="${user.role || 'user'}"
              >
                ${user.role === 'admin' ? 'Remove Admin' : 'Make Admin'}
              </button>
              <button 
                class="impersonate-btn text-xs px-2 py-1 bg-purple-700 hover:bg-purple-600 text-white rounded"
                data-user-id="${user.id}"
                ${user.id === currentUserId ? 'disabled' : ''}
                ${user.id === currentUserId ? 'title="Cannot impersonate yourself"' : ''}
                ${user.id === currentUserId ? 'style="opacity: 0.5; cursor: not-allowed;"' : ''}
              >
                Impersonate
              </button>
              <button 
                class="logout-user-btn text-xs px-2 py-1 bg-amber-700 hover:bg-amber-600 text-white rounded"
                data-user-id="${user.id}"
              >
                Log Out
              </button>
              <button 
                class="delete-user-btn text-xs px-2 py-1 bg-red-700 hover:bg-red-600 text-white rounded"
                data-user-id="${user.id}"
              >
                Delete
              </button>
            </div>
          </td>
        </tr>
      `
        )
        .join('');

      // Add event listeners to buttons
      setupButtonEventListeners();
    } catch (error) {
      console.error('Error loading users:', error);
      if (usersTableBody) {
        usersTableBody.innerHTML =
          '<tr><td colspan="5" class="text-center py-4 text-red-400">Failed to load users</td></tr>';
      }
    }
  }

  function setupButtonEventListeners() {
    // Add event listeners to buttons
    document.querySelectorAll('.logout-user-btn').forEach((btn) => {
      btn.addEventListener('click', () => {
        actionUserId = btn.getAttribute('data-user-id') || '';
        actionType = 'logout';
        showConfirmationModal(
          'Log Out User',
          'Are you sure you want to terminate all sessions for this user?'
        );
      });
    });

    document.querySelectorAll('.delete-user-btn').forEach((btn) => {
      btn.addEventListener('click', () => {
        actionUserId = btn.getAttribute('data-user-id') || '';
        actionType = 'delete';
        showConfirmationModal(
          'Delete User',
          'Are you sure you want to permanently delete this user? This action cannot be undone.'
        );
      });
    });

    document.querySelectorAll('.make-admin-btn').forEach((btn) => {
      btn.addEventListener('click', async () => {
        const userId = btn.getAttribute('data-user-id') || '';
        const currentRole = btn.getAttribute('data-user-role') || 'user';
        const newRole = currentRole === 'admin' ? 'user' : 'admin';
        const actionText =
          newRole === 'admin'
            ? 'promote this user to admin'
            : 'remove admin privileges from this user';

        actionUserId = userId;
        actionType = 'role';

        showConfirmationModal(
          newRole === 'admin' ? 'Make Admin' : 'Remove Admin',
          `Are you sure you want to ${actionText}?`
        );
      });
    });

    document.querySelectorAll('.impersonate-btn').forEach((btn) => {
      if (!btn.hasAttribute('disabled')) {
        btn.addEventListener('click', () => {
          actionUserId = btn.getAttribute('data-user-id') || '';
          actionType = 'impersonate';
          showConfirmationModal(
            'Impersonate User',
            'You will be temporarily signed in as this user. Are you sure you want to continue?'
          );
        });
      }
    });

    document.querySelectorAll('.view-sessions-btn').forEach((btn) => {
      btn.addEventListener('click', async () => {
        const userId = btn.getAttribute('data-user-id') || '';
        await showUserSessions(userId);
      });
    });
  }

  // Modal controls
  function showConfirmationModal(title: string, message: string) {
    if (modalTitle) modalTitle.textContent = title;
    if (modalMessage) modalMessage.textContent = message;
    confirmationModal?.classList.remove('hidden');
  }

  function hideConfirmationModal() {
    confirmationModal?.classList.add('hidden');
    actionUserId = '';
    actionType = '';
  }

  cancelBtn?.addEventListener('click', hideConfirmationModal);

  confirmBtn?.addEventListener('click', async () => {
    if (!actionUserId || !actionType) {
      hideConfirmationModal();
      return;
    }

    try {
      if (actionType === 'logout') {
        await window.PageTurnAuthClient.admin.revokeUserSessions({
          userId: actionUserId,
        });

        // Update UI - for simplicity, add a revoked class to show the sessions are revoked
        const userRow = document.querySelector(
          `tr[data-user-id="${actionUserId}"]`
        );
        if (userRow) {
          userRow.classList.add('opacity-75');
        }
      } else if (actionType === 'delete') {
        await window.PageTurnAuthClient.admin.removeUser({
          userId: actionUserId,
        });

        // Remove row from table
        const userRow = document.querySelector(
          `tr[data-user-id="${actionUserId}"]`
        );
        userRow?.remove();

        // Update the count
        if (userCountElement) {
          const countText = userCountElement.textContent || '';
          const countMatch = countText.match(/Total: (\d+) users/);
          if (countMatch && countMatch[1]) {
            const currentCount = parseInt(countMatch[1], 10);
            if (!isNaN(currentCount)) {
              userCountElement.textContent = `Total: ${currentCount - 1} users`;
            }
          }
        }
      } else if (actionType === 'role') {
        const userRow = document.querySelector(
          `tr[data-user-id="${actionUserId}"]`
        );
        const roleCell = userRow?.querySelector('td:nth-child(4) span');
        const roleBtn = userRow?.querySelector('.make-admin-btn');

        const currentRole = roleCell?.textContent?.trim() || 'user';
        const newRole = currentRole === 'admin' ? 'user' : 'admin';

        await window.PageTurnAuthClient.admin.setRole({
          userId: actionUserId,
          role: newRole,
        });

        // Update UI
        if (roleCell) roleCell.textContent = newRole;
        if (roleBtn) {
          roleBtn.textContent =
            newRole === 'admin' ? 'Remove Admin' : 'Make Admin';
          roleBtn.setAttribute('data-user-role', newRole);
        }
      } else if (actionType === 'impersonate') {
        // Start impersonation
        await window.PageTurnAuthClient.admin.impersonateUser({
          userId: actionUserId,
        });

        // Redirect to the home page as the impersonated user
        window.location.href = '/';
      }

      hideConfirmationModal();
    } catch (error) {
      console.error('Admin action failed:', error);
      alert('Operation failed. Please try again.');
      hideConfirmationModal();
    }
  });

  // Session modal management
  async function showUserSessions(userId: string) {
    try {
      // Get user info for the title
      const userRow = document.querySelector(`tr[data-user-id="${userId}"]`);
      const userName =
        userRow?.querySelector('td:first-child')?.textContent?.trim() || 'User';

      if (sessionsModalTitle) {
        sessionsModalTitle.textContent = `Sessions for ${userName}`;
      }

      // Clear previous content
      if (sessionsTableBody) {
        sessionsTableBody.innerHTML =
          '<tr><td colspan="5" class="text-center">Loading...</td></tr>';
      }

      // Show modal
      sessionsModal?.classList.remove('hidden');

      // Get sessions
      const response = await window.PageTurnAuthClient.admin.listUserSessions({
        userId: userId,
      });

      // Populate table
      if (sessionsTableBody) {
        const sessions = response.data.sessions;
        if (sessions && sessions.length > 0) {
          sessionsTableBody.innerHTML = sessions
            .map(
              (session: any) => `
            <tr data-session-id="${session.id}">
              <td>${session.userAgent || 'Unknown'}</td>
              <td>${session.ipAddress || 'Unknown'}</td>
              <td>${new Date(session.createdAt).toLocaleString()}</td>
              <td>${new Date(session.expiresAt).toLocaleString()}</td>
              <td>
                <button 
                  class="revoke-session-btn text-xs px-2 py-1 bg-amber-700 hover:bg-amber-600 text-white rounded"
                  data-session-token="${session.token}"
                >
                  Revoke
                </button>
              </td>
            </tr>
          `
            )
            .join('');

          // Add event listeners to revoke buttons
          document.querySelectorAll('.revoke-session-btn').forEach((btn) => {
            btn.addEventListener('click', async () => {
              const sessionToken = btn.getAttribute('data-session-token');
              if (sessionToken) {
                try {
                  await window.PageTurnAuthClient.admin.revokeUserSession({
                    sessionToken: sessionToken,
                  });

                  // Remove row
                  const sessionRow = btn.closest('tr');
                  sessionRow?.remove();
                } catch (error) {
                  console.error('Failed to revoke session:', error);
                  alert('Failed to revoke session. Please try again.');
                }
              }
            });
          });
        } else {
          sessionsTableBody.innerHTML =
            '<tr><td colspan="5" class="text-center">No active sessions found</td></tr>';
        }
      }
    } catch (error) {
      console.error('Failed to load sessions:', error);
      if (sessionsTableBody) {
        sessionsTableBody.innerHTML =
          '<tr><td colspan="5" class="text-center text-red-400">Failed to load sessions</td></tr>';
      }
    }
  }

  // Close sessions modal
  closeSessionsBtn?.addEventListener('click', () => {
    sessionsModal?.classList.add('hidden');
  });

  // Close sessions modal when clicking outside
  sessionsModal?.addEventListener('click', (e) => {
    if (e.target === sessionsModal) {
      sessionsModal.classList.add('hidden');
    }
  });

  // Close confirmation modal when clicking outside
  confirmationModal?.addEventListener('click', (e) => {
    if (e.target === confirmationModal) {
      hideConfirmationModal();
    }
  });
</script>
