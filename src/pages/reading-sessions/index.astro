---
import Layout from '../../layouts/Layout.astro';
import { getAllReadingSessions, getBookById } from '../../lib/db';

const sessions = await getAllReadingSessions();

// Format seconds to HH:MM:SS
function formatDuration(seconds: number): string {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);

  return [
    hours.toString().padStart(2, '0'),
    minutes.toString().padStart(2, '0'),
    secs.toString().padStart(2, '0'),
  ].join(':');
}

// Get book information for each session
const sessionsWithBookInfo = await Promise.all(
  sessions.map(async (session) => {
    const book = await getBookById(session.bookId);
    return {
      ...session,
      bookTitle: book?.title || 'Unknown Book',
      bookAuthor: book?.author || 'Unknown Author',
      formattedDuration: formatDuration(session.duration),
    };
  })
);

// Sort sessions by date (newest first)
sessionsWithBookInfo.sort((a, b) => {
  return new Date(b.date).getTime() - new Date(a.date).getTime();
});
---

<Layout title="Reading Sessions | PageTurn">
  <div>
    <div class="flex justify-between items-center mb-6">
      <h1 class="mb-0">Reading Sessions</h1>
      <a href="/reading-sessions/new" class="btn">Log New Session</a>
    </div>

    {
      sessionsWithBookInfo.length === 0 ? (
        <div class="card text-center py-12">
          <h2>No reading sessions yet</h2>
          <p class="mb-6">
            Start tracking your reading by logging your first session.
          </p>
          <a href="/reading-sessions/new" class="btn">
            Log Your First Session
          </a>
        </div>
      ) : (
        <div>
          <div class="mb-4 flex justify-end">
            <div class="relative">
              <input
                type="text"
                id="search"
                placeholder="Search sessions..."
                class="form-input pl-10"
              />
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                />
              </svg>
            </div>
          </div>

          <div class="overflow-x-auto">
            <table class="w-full whitespace-nowrap">
              <thead>
                <tr class="bg-gray-100 dark:bg-slate-700">
                  <th class="px-4 py-3 text-left">Date</th>
                  <th class="px-4 py-3 text-left">Book</th>
                  <th class="px-4 py-3 text-left">Pages Read</th>
                  <th class="px-4 py-3 text-left">Duration</th>
                  <th class="px-4 py-3 text-left">Pages/Hour</th>
                  <th class="px-4 py-3 text-left">Finished?</th>
                  <th class="px-4 py-3 text-left">Actions</th>
                </tr>
              </thead>
              <tbody>
                {sessionsWithBookInfo.map((session) => {
                  const pagesPerHour =
                    session.pagesRead / (session.duration / 3600) || 0;

                  return (
                    <tr class="border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-slate-800">
                      <td class="px-4 py-3">
                        {new Date(session.date).toLocaleDateString()}
                      </td>
                      <td class="px-4 py-3">
                        <a
                          href={`/books/${session.bookId}`}
                          class="font-medium text-blue-600 hover:underline"
                        >
                          {session.bookTitle}
                        </a>
                        <div class="text-xs text-gray-500">
                          {session.bookAuthor}
                        </div>
                      </td>
                      <td class="px-4 py-3">{session.pagesRead}</td>
                      <td class="px-4 py-3">{session.formattedDuration}</td>
                      <td class="px-4 py-3">{pagesPerHour.toFixed(1)}</td>
                      <td class="px-4 py-3">
                        {session.finished ? (
                          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            Finished
                          </span>
                        ) : (
                          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            In Progress
                          </span>
                        )}
                      </td>
                      <td class="px-4 py-3 flex space-x-2">
                        <a
                          href={`/reading-sessions/${session.id}/edit`}
                          class="text-blue-600 hover:text-blue-800"
                        >
                          <span class="sr-only">Edit</span>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                            />
                          </svg>
                        </a>
                        <a
                          href={`/reading-sessions/${session.id}/delete`}
                          class="text-red-600 hover:text-red-800"
                        >
                          <span class="sr-only">Delete</span>
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                            />
                          </svg>
                        </a>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      )
    }
  </div>
</Layout>

<script>
  // Client-side search functionality
  const searchInput = document.getElementById('search') as HTMLInputElement;

  if (searchInput) {
    searchInput.addEventListener('input', () => {
      const searchTerm = searchInput.value.toLowerCase();
      const rows = document.querySelectorAll('tbody tr');

      rows.forEach((row) => {
        const text = row.textContent?.toLowerCase() || '';
        const htmlRow = row as HTMLElement;
        if (text.includes(searchTerm)) {
          htmlRow.style.display = '';
        } else {
          htmlRow.style.display = 'none';
        }
      });
    });
  }
</script>
